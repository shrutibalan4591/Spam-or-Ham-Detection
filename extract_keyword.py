# -*- coding: utf-8 -*-
"""extract_keyword.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4kixnIvAqKnhYYALbgLBD5n0g93Vlcm
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.tokenize import RegexpTokenizer
nltk.download('wordnet') 
from nltk.stem.wordnet import WordNetLemmatizer

from os import path
from PIL import Image
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import matplotlib.pyplot as plt
# % matplotlib inline

from sklearn.feature_extraction.text import CountVectorizer
import re

from sklearn.feature_extraction.text import TfidfTransformer

import pickle
from flask import Flask, request, render_template

app = Flask(__name__)

#Creating a list of stop words and adding custom stopwords
stop_words = set(stopwords.words("english"))

#Creating a list of custom stopwords
new_words = ["using", "show", "result", "large", "also", "iv", "one", "two", "new", "previously", "shown", "useful"]
stop_words = stop_words.union(new_words)

# TEXT PREPROCESSING
# FUNCTION TO CREATE A CORPUS
def create_corpus(data):
  corpus = []
#for i in range(0, df.word_count.count()):
  #Remove punctuations
  text = re.sub('[^a-zA-Z]', ' ', data)
    
  #Convert to lowercase
  text = text.lower()
    
  #remove tags
  text=re.sub("&lt;/?.*?&gt;"," &lt;&gt; ",text)
    
  # remove special characters and digits
  text=re.sub("(\\d|\\W)+"," ",text)
    
  #Convert to list from string
  text = text.split()
    
  #Stemming
  ps=PorterStemmer()
  #Lemmatisation
  lem = WordNetLemmatizer()
  text = [lem.lemmatize(word) for word in text if not word in  
          stop_words] 
  text = " ".join(text)
  corpus.append(text) 

  return corpus

#Function for sorting tf_idf in descending order
from scipy.sparse import coo_matrix
def sort_coo(coo_matrix):
    tuples = zip(coo_matrix.col, coo_matrix.data)
    return sorted(tuples, key=lambda x: (x[1], x[0]), reverse=True)
 
def extract_topn_from_vector(feature_names, sorted_items, topn=10):
    """get the feature names and tf-idf score of top n items"""
    
    #use only topn items from vector
    sorted_items = sorted_items[:topn]
 
    score_vals = []
    feature_vals = []
    
    # word index and corresponding tf-idf score
    for idx, score in sorted_items:
        
        #keep track of feature name and its corresponding score
        score_vals.append(round(score, 3))
        feature_vals.append(feature_names[idx])
 
    #create a tuples of feature,score
    #results = zip(feature_vals,score_vals)
    results= {}
    for idx in range(len(feature_vals)):
        results[feature_vals[idx]]=score_vals[idx]
    
    return results

@app.route('/')
def home():
	return render_template('home.html')

@app.route('/predict',methods=['POST'])
def predict():
  if request.method == 'POST':
    data = request.form['message']
    word_count = len(str(data).split(" "))

    corpus = create_corpus(data)

    # Vectorisation - CountVectorizer
    cv=CountVectorizer(stop_words=stop_words, 
                        max_features=300, 
                        ngram_range=(1,3))
    X=cv.fit_transform(corpus)

    # Converting to a matrix of integers
    tfidf_transformer=TfidfTransformer(smooth_idf=True,use_idf=True)
    tfidf_transformer.fit(X)
    # get feature names
    feature_names=cv.get_feature_names()
      
    # fetch document for which keywords needs to be extracted
    #doc=corpus[532]
      
    #generate tf-idf for the given document
    tf_idf_vector=tfidf_transformer.transform(cv.transform(corpus))

    #vect = cv.transform(data).toarray()

    #sort the tf-idf vectors by descending order of scores
    sorted_items=sort_coo(tf_idf_vector.tocoo())
    #extract only the top n; n here is 10
    keywords=extract_topn_from_vector(feature_names,sorted_items,5)
      
    # now print the results
    print("\nAbstract:")
    print(corpus)
    print("\nKeywords:")
    for k in keywords:
      print(k,keywords[k])

    my_prediction = model.predict(vect)
    return render_template('prediction.html', prediction=my_prediction)

data = 'Architecture (Latin architectura, from the Greek ἀρχιτέκτων arkhitekton "architect", from ἀρχι- "chief" and τέκτων "creator") is both the process and the product of planning, designing, and constructing buildings or other structures.[3] Architectural works, in the material form of buildings, are often perceived as cultural symbols and as works of art. Historical civilizations are often identified with their surviving architectural achievements.The practice, which began in the prehistoric era, has been used as a way of expressing culture for civilizations on all seven continents.[5] For this reason, architecture is considered to be a form of art. Texts on architecture have been written since ancient time. The earliest surviving text on architectural theory is the 1st century AD treatise De architectura by the Roman architect Vitruvius, according to whom a good building embodies firmitas, utilitas, and venustas (durability, utility, and beauty). Centuries later, Leon Battista Alberti developed his ideas further, seeing beauty as an objective quality of buildings to be found in their proportions. Giorgio Vasari wrote Lives of the Most Excellent Painters, Sculptors, and Architects and put forward the idea of style in the Western arts in the 16th century. In the 19th century, Louis Sullivan declared that "form follows function". "Function" began to replace the classical "utility" and was understood to include not only practical but also aesthetic, psychological and cultural dimensions. The idea of sustainable architecture was introduced in the late 20th century. rchitecture began as rural, oral vernacular architecture that developed from trial and error to successful replication. Ancient urban architecture was preoccupied with building religious structures and buildings symbolizing the political power of rulers until Greek and Roman architecture shifted focus to civic virtues. Indian and Chinese architecture influenced forms all over Asia and Buddhist architecture in particular took diverse local flavors. During the European Middle Ages, pan-European styles of Romanesque and Gothic cathedrals and abbeys emerged while the Renaissance favored Classical forms implemented by architects known by name. Later, the roles of architects and engineers became separated. Modern architecture began after World War I as an avant-garde movement that sought to develop a completely new style appropriate for a new post-war social and economic order focused on meeting the needs of the middle and working classes. Emphasis was put on modern techniques, materials, and simplified geometric forms, paving the way for high-rise superstructures. Many architects became disillusioned with modernism which they perceived as ahistorical and anti-aesthetic, and postmodern and contemporary architecture developed.Architecture can mean:A general term to describe buildings and other physical structures.The art and science of designing buildings and (some) nonbuilding structures.The style of design and method of construction of buildings and other physical structures.A unifying or coherent form or structure.Knowledge of art, science, technology, and humanity.The design activity of the architect,[6] from the macro-level (urban design, landscape architecture) to the micro-level (construction details and furniture). The practice of the architect, where architecture means offering or rendering professional services in connection with the design and construction of buildings, or built environments. Theory of architecture Main articles: Architectural theory and Philosophy of architecture Illustration of bracket arm clusters containing cantilevers from Yingzao Fashi, a text on architecture by Li Jue (1065–1110) Plan d exécution du second étage de l hôtel de Brionne (dessin) De Cotte 2503c – Gallica 2011 (adjusted) Plan of the second floor (attic storey) of the Hôtel de Brionne in Paris – 1734. The philosophy of architecture is a branch of philosophy of art, dealing with aesthetic value of architecture, its semantics and relations with development of culture. Many philosophers and theoreticians from Plato to Michel Foucault, Gilles Deleuze,[9] Robert Venturi and Ludwig Wittgenstein have concerned themselves with the nature of architecture and whether or not architecture is distinguished from building. Historic treatises The earliest surviving written work on the subject of architecture is De architectura by the Roman architect Vitruvius in the early 1st century AD.[10] According to Vitruvius, a good building should satisfy the three principles of firmitas, utilitas, venustas,[11][12] commonly known by the original translation – firmness, commodity and delight. An equivalent in modern English would be: Durability – a building should stand up robustly and remain in good condition Utility – it should be suitable for the purposes for which it is used Beauty – it should be aesthetically pleasing'

word_count = len(str(data).split(" "))

#Creating a list of stop words and adding custom stopwords
stop_words = set(stopwords.words("english"))

#Creating a list of custom stopwords
new_words = ["using", "show", "result", "large", "also", "iv", "one", "two", "new", "previously", "shown", "useful"]
stop_words = stop_words.union(new_words)

# TEXT PREPROCESSING
# FUNCTION TO CREATE A CORPUS
def create_corpus(data):
  corpus = []
#for i in range(0, df.word_count.count()):
  #Remove punctuations
  text = re.sub('[^a-zA-Z]', ' ', data)
    
  #Convert to lowercase
  text = text.lower()
    
  #remove tags
  text=re.sub("&lt;/?.*?&gt;"," &lt;&gt; ",text)
    
  # remove special characters and digits
  text=re.sub("(\\d|\\W)+"," ",text)
    
  #Convert to list from string
  text = text.split()
    
  #Stemming
  ps=PorterStemmer()
  #Lemmatisation
  lem = WordNetLemmatizer()
  text = [lem.lemmatize(word) for word in text if not word in  
          stop_words] 
  text = " ".join(text)
  corpus.append(text) 

  return corpus

corpus = create_corpus(data)

corpus

# Vectorisation - CountVectorizer
cv=CountVectorizer(stop_words=stop_words, 
                   max_features=300, 
                   ngram_range=(1,3))
X=cv.fit_transform(corpus)

# Converting to a matrix of integers
tfidf_transformer=TfidfTransformer(smooth_idf=True,use_idf=True)
tfidf_transformer.fit(X)

# get feature names
feature_names=cv.get_feature_names()
 
# fetch document for which keywords needs to be extracted
#doc=corpus[532]
 
#generate tf-idf for the given document
tf_idf_vector=tfidf_transformer.transform(cv.transform(corpus))

#Function for sorting tf_idf in descending order
from scipy.sparse import coo_matrix
def sort_coo(coo_matrix):
    tuples = zip(coo_matrix.col, coo_matrix.data)
    return sorted(tuples, key=lambda x: (x[1], x[0]), reverse=True)
 
def extract_topn_from_vector(feature_names, sorted_items, topn=10):
    """get the feature names and tf-idf score of top n items"""
    
    #use only topn items from vector
    sorted_items = sorted_items[:topn]
 
    score_vals = []
    feature_vals = []
    
    # word index and corresponding tf-idf score
    for idx, score in sorted_items:
        
        #keep track of feature name and its corresponding score
        score_vals.append(round(score, 3))
        feature_vals.append(feature_names[idx])
 
    #create a tuples of feature,score
    #results = zip(feature_vals,score_vals)
    results= {}
    for idx in range(len(feature_vals)):
        results[feature_vals[idx]]=score_vals[idx]
    
    return results

#sort the tf-idf vectors by descending order of scores
sorted_items=sort_coo(tf_idf_vector.tocoo())
#extract only the top n; n here is 10
keywords=extract_topn_from_vector(feature_names,sorted_items,5)
keywords 
# now print the results
#print("\nAbstract:")
#print(corpus)
#print("\nKeywords:")
#for k in keywords:
 #   print(k,keywords[k])

for key, value in keywords.items() :
    print (key)

